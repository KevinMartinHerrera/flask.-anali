
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARGS ARRAY COLON COMMA DEF DIVIDE DOT ELSE EQUALS FOR ID IF LBRACE LEFT_BRACKET LPAREN MAIN MINUS NUMBER OBJECT PLUS PRINT PRINTLN RBRACE RIGHT_BRACKET RPAREN SEMICOLON STRING_LITERAL STRING_TYPE TIMES UNIT WHILE\n    program : object_declaration\n    \n    object_declaration : OBJECT ID LBRACE main_declaration RBRACE \n    \n    main_declaration : DEF MAIN LPAREN args LBRACE statements RBRACE \n    \n    args : ARGS COLON ARRAY LEFT_BRACKET STRING_TYPE RIGHT_BRACKET RPAREN COLON UNIT EQUALS\n    \n    block : LBRACE statements RBRACE\n    \n    statements : statement\n               | statements statement\n    \n    statement : expression SEMICOLON\n              | println_statement\n              | assignment\n    \n    println_statement : PRINTLN LPAREN expression RPAREN SEMICOLON\n                      | PRINTLN LPAREN STRING_LITERAL RPAREN SEMICOLON\n    \n    expression : term\n               | expression PLUS term\n               | expression MINUS term\n    \n    term : factor\n         | term TIMES factor\n         | term DIVIDE factor\n    \n    factor : NUMBER\n           | ID\n           | LPAREN expression RPAREN\n    \n    assignment : ID EQUALS expression\n    '
    
_lr_action_items = {'OBJECT':([0,],[3,]),'$end':([1,2,8,],[0,-1,-2,]),'ID':([3,13,15,16,17,19,20,21,24,25,28,30,31,32,33,34,35,36,37,39,40,41,42,43,46,51,52,],[4,23,28,23,-6,-9,-10,-13,-16,-19,-20,-7,-8,28,28,28,28,28,28,-21,-14,-15,-17,-18,-22,-11,-12,]),'LBRACE':([4,11,56,],[5,13,-4,]),'DEF':([5,],[7,]),'RBRACE':([6,16,17,19,20,21,24,25,28,29,30,31,39,40,41,42,43,46,51,52,],[8,29,-6,-9,-10,-13,-16,-19,-20,-3,-7,-8,-21,-14,-15,-17,-18,-22,-11,-12,]),'MAIN':([7,],[9,]),'LPAREN':([9,13,15,16,17,19,20,21,22,24,25,28,30,31,32,33,34,35,36,37,39,40,41,42,43,46,51,52,],[10,15,15,15,-6,-9,-10,-13,36,-16,-19,-20,-7,-8,15,15,15,15,15,15,-21,-14,-15,-17,-18,-22,-11,-12,]),'ARGS':([10,],[12,]),'COLON':([12,53,],[14,54,]),'PRINTLN':([13,16,17,19,20,21,24,25,28,30,31,39,40,41,42,43,46,51,52,],[22,22,-6,-9,-10,-13,-16,-19,-20,-7,-8,-21,-14,-15,-17,-18,-22,-11,-12,]),'NUMBER':([13,15,16,17,19,20,21,24,25,28,30,31,32,33,34,35,36,37,39,40,41,42,43,46,51,52,],[25,25,25,-6,-9,-10,-13,-16,-19,-20,-7,-8,25,25,25,25,25,25,-21,-14,-15,-17,-18,-22,-11,-12,]),'ARRAY':([14,],[26,]),'SEMICOLON':([18,21,23,24,25,28,39,40,41,42,43,48,49,],[31,-13,-20,-16,-19,-20,-21,-14,-15,-17,-18,51,52,]),'PLUS':([18,21,23,24,25,27,28,39,40,41,42,43,44,46,],[32,-13,-20,-16,-19,32,-20,-21,-14,-15,-17,-18,32,32,]),'MINUS':([18,21,23,24,25,27,28,39,40,41,42,43,44,46,],[33,-13,-20,-16,-19,33,-20,-21,-14,-15,-17,-18,33,33,]),'RPAREN':([21,24,25,27,28,39,40,41,42,43,44,45,50,],[-13,-16,-19,39,-20,-21,-14,-15,-17,-18,48,49,53,]),'TIMES':([21,23,24,25,28,39,40,41,42,43,],[34,-20,-16,-19,-20,-21,34,34,-17,-18,]),'DIVIDE':([21,23,24,25,28,39,40,41,42,43,],[35,-20,-16,-19,-20,-21,35,35,-17,-18,]),'EQUALS':([23,55,],[37,56,]),'LEFT_BRACKET':([26,],[38,]),'STRING_LITERAL':([36,],[45,]),'STRING_TYPE':([38,],[47,]),'RIGHT_BRACKET':([47,],[50,]),'UNIT':([54,],[55,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'object_declaration':([0,],[2,]),'main_declaration':([5,],[6,]),'args':([10,],[11,]),'statements':([13,],[16,]),'statement':([13,16,],[17,30,]),'expression':([13,15,16,36,37,],[18,27,18,44,46,]),'println_statement':([13,16,],[19,19,]),'assignment':([13,16,],[20,20,]),'term':([13,15,16,32,33,36,37,],[21,21,21,40,41,21,21,]),'factor':([13,15,16,32,33,34,35,36,37,],[24,24,24,24,24,42,43,24,24,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> object_declaration','program',1,'p_program','analizador_Sintactico.py',7),
  ('object_declaration -> OBJECT ID LBRACE main_declaration RBRACE','object_declaration',5,'p_object_declaration','analizador_Sintactico.py',13),
  ('main_declaration -> DEF MAIN LPAREN args LBRACE statements RBRACE','main_declaration',7,'p_main_declaration','analizador_Sintactico.py',19),
  ('args -> ARGS COLON ARRAY LEFT_BRACKET STRING_TYPE RIGHT_BRACKET RPAREN COLON UNIT EQUALS','args',10,'p_args','analizador_Sintactico.py',26),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','analizador_Sintactico.py',32),
  ('statements -> statement','statements',1,'p_statements','analizador_Sintactico.py',38),
  ('statements -> statements statement','statements',2,'p_statements','analizador_Sintactico.py',39),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','analizador_Sintactico.py',46),
  ('statement -> println_statement','statement',1,'p_statement','analizador_Sintactico.py',47),
  ('statement -> assignment','statement',1,'p_statement','analizador_Sintactico.py',48),
  ('println_statement -> PRINTLN LPAREN expression RPAREN SEMICOLON','println_statement',5,'p_println_statement','analizador_Sintactico.py',54),
  ('println_statement -> PRINTLN LPAREN STRING_LITERAL RPAREN SEMICOLON','println_statement',5,'p_println_statement','analizador_Sintactico.py',55),
  ('expression -> term','expression',1,'p_expression','analizador_Sintactico.py',61),
  ('expression -> expression PLUS term','expression',3,'p_expression','analizador_Sintactico.py',62),
  ('expression -> expression MINUS term','expression',3,'p_expression','analizador_Sintactico.py',63),
  ('term -> factor','term',1,'p_term','analizador_Sintactico.py',69),
  ('term -> term TIMES factor','term',3,'p_term','analizador_Sintactico.py',70),
  ('term -> term DIVIDE factor','term',3,'p_term','analizador_Sintactico.py',71),
  ('factor -> NUMBER','factor',1,'p_factor','analizador_Sintactico.py',77),
  ('factor -> ID','factor',1,'p_factor','analizador_Sintactico.py',78),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','analizador_Sintactico.py',79),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment','analizador_Sintactico.py',88),
]
